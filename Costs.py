from CellStates import CellStates


class Costs:
    """
    Class to represent costs associated with different states and transitions in the SASIR model.

    Attributes:
        c_A (float): Cost for state Alert.
        c_S (float): Cost for state Susceptible.
        c_I (float): Cost for state Infected.
        c_R (float): Cost for state Recovered.
        c_SI (float): Cost for transition Susceptible to Infected.
        c_SA (float): Cost for transition Susceptible to Alert.
        c_AS (float): Cost for transition Alert to Susceptible.
        c_AI (float): Cost for transition Alert to Infected.
        c_IR (float): Cost for transition Infected to Recovered.
    """

    def __init__(self, c_A, c_S, c_I, c_R, c_SI, c_SA, c_AS, c_AI, c_IR):
        self.c_A = c_A  # Cost for state Alert
        self.c_S = c_S  # Cost for state Susceptible
        self.c_I = c_I  # Cost for state Infected
        self.c_R = c_R  # Cost for state Recovered
        self.c_SI = c_SI  # Cost for transition S -> I
        self.c_SA = c_SA  # Cost for transition S -> A
        self.c_AS = c_AS  # Cost for transition A -> S
        self.c_AI = c_AI  # Cost for transition A -> I
        self.c_IR = c_IR  # Cost for transition I -> R

    def get_state_cost(self, state):
        """
        Get the cost associated with a specific state.

        Args:
            state (CellStates): State for which to retrieve the cost.

        Returns:
            float: Cost associated with the state.
        """
        if state == CellStates.ALERT_A1:
            return self.c_A
        elif state == CellStates.SUSCEPTIBLE:
            return self.c_S
        elif state == CellStates.INFECTED:
            return self.c_I
        elif state == CellStates.RECOVERED:
            return self.c_R
        else:
            raise ValueError("Invalid cell state")

    def get_transition_cost(self, from_state, to_state):
        """
        Calculate the cost of transitioning from one state to another.

        Args:
            from_state (CellStates): Source state of the transition.
            to_state (CellStates): Destination state of the transition.

        Returns:
            float: Cost of the transition.
        """
        if from_state == CellStates.SUSCEPTIBLE:
            if to_state == CellStates.INFECTED:
                return self.c_SI
            elif to_state == CellStates.ALERT_A1:
                return self.c_SA
            else:
                raise ValueError("Invalid transition")

        elif from_state == CellStates.ALERT_A1:
            if to_state == CellStates.SUSCEPTIBLE:
                return self.c_AS
            elif to_state == CellStates.INFECTED:
                return self.c_AI
            else:
                raise ValueError("Invalid transition")

        elif from_state == CellStates.INFECTED:
            if to_state == CellStates.RECOVERED:
                return self.c_IR
            else:
                raise ValueError("Invalid transition")

        else:
            raise ValueError("Invalid source state")
