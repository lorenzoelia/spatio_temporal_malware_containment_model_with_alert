import numpy as np

from CellStates import CellStates


class Cell:
    """
    A class representing a cell in the cellular automaton model.

    Attributes:
        state (int): The current state of the cell.

    Methods:
        transition(neighbor_states, parameters): Apply state transition based on neighboring cell states and parameters.
    """

    def __init__(self, state):
        """
        Initialize a Cell object with the given state.

        Args:
            state (int): The initial state of the cell.
        """
        self.state = state

    def transition(self, neighbor_states, parameters):
        """
        Apply state transition to the cell based on neighboring cell states and parameters.

        Args:
            neighbor_states (list[int]): List of states of neighboring cells.
            parameters (Parameters): An instance of the Parameters class containing model parameters.
        """
        neighbors_a1 = neighbor_states.count(CellStates.ALERT_A1)
        neighbors_i = neighbor_states.count(CellStates.INFECTED)

        if self.state == CellStates.ALERT_A1 or self.state == CellStates.ALERT_A2:
            r = np.random.rand()
            if r < parameters.beta2:
                self.state = CellStates.INFECTED
            elif parameters.beta2 <= r < parameters.beta2 + parameters.epsilon2:
                self.state = CellStates.ALERT_A1
            elif neighbors_a1 > 0 and parameters.beta2 + parameters.epsilon2 <= r:
                self.state = CellStates.ALERT_A2
            else:
                self.state = CellStates.SUSCEPTIBLE

        elif self.state == CellStates.SUSCEPTIBLE:
            for _ in range(neighbors_i):
                r = np.random.rand()
                if r < parameters.beta1:
                    self.state = CellStates.INFECTED
                elif parameters.beta1 <= r < parameters.beta1 + parameters.epsilon1:
                    self.state = CellStates.ALERT_A1
                elif neighbors_a1 > 0 and parameters.beta1 + parameters.epsilon1 <= r:
                    self.state = CellStates.ALERT_A2

        elif self.state == CellStates.INFECTED:
            r = np.random.rand()
            if r < parameters.gamma:
                self.state = CellStates.RECOVERED

    def __str__(self):
        return str(self.state)