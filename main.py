from matplotlib import pyplot as plt
import numpy as np

from Costs import Costs
from Grid import Grid
from Parameters import Parameters
from ResultsAnalyzer import ResultsAnalyzer
from Simulation import Simulation


def plot_percentages(data_lists, labels, title):
    # Create a figure and axis
    fig, ax = plt.subplots()

    # Iterate through the data_lists and labels
    for data, label in zip(data_lists, labels):
        ax.plot(data, label=label)

    # Add a legend
    ax.legend()

    # Set labels and title
    ax.set_xlabel("Time Steps")
    ax.set_ylabel("Percentages (%)")
    ax.set_title(title)

    # Enable grid lines
    ax.grid(True)

    # Show the plot
    plt.show()


def plot_costs(costs, epsilon1_values):
    # Calculate the ratios using the first cost as reference
    reference_cost = costs[0]  # SIR cost
    ratios = [reference_cost * (1 - (reference_cost - cost) / reference_cost * 0.01) for cost in costs]

    # Create a figure and axis
    fig, ax = plt.subplots()

    # Create the bar plot
    bar_width = 0.4
    ax.bar(range(len(epsilon1_values)), costs, width=bar_width, label='Costs')

    # Create the line plot for ratios
    ax.plot(range(len(epsilon1_values)), ratios, marker='o', color='red', label='Ratios')

    # Set labels and title
    ax.set_xlabel('Epsilon1 Values')
    ax.set_ylabel('Values')
    ax.set_title('Costs and Ratios for Different Epsilon1 Values')
    ax.legend()

    # Set custom x-axis tick labels
    ax.set_xticks(range(len(epsilon1_values)))
    ax.set_xticklabels(epsilon1_values)

    # Add labels to the points on the line plot
    for i, txt in enumerate(ratios):
        ax.annotate(f'{txt:.2f}', (i, ratios[i]), textcoords="offset points", xytext=(0, 10), ha='center')

    # Show the plot
    plt.show()


def print_values(values, epsilon1_options, label):
    # Print a fancy table header
    print('\n')
    print("{:<15} {:<15}".format("Epsilon1", label))
    print("=" * 31)

    # Print the values with their corresponding epsilon1 values
    for epsilon1, value in zip(epsilon1_options, values):
        print("{:<15} {:<15}".format(epsilon1, value))


def main(verbose=False, show_plot=False, save_to_csv=False, save_plot=False):
    epsilon1_options = [0.0, 0.001, 0.002, 0.02, 0.475]
    epsilon1_options = [0.02]

    avg_infected_list = []
    avg_vulnerable_list = []
    avg_total_costs_list = []
    peak_infected_list = []
    protected_from_infection_list = []

    for epsilon1 in epsilon1_options:
        # Define parameters
        parameters = Parameters(beta1=0.05, beta2=0.005, gamma=0.02, epsilon1=epsilon1, epsilon2=0.475)

        # Initialize costs
        costs = Costs(c_A=1, c_S=0, c_I=10, c_R=0, c_SI=0, c_SA=0, c_AS=0, c_AI=0, c_IR=0)

        # Create a Grid instance
        grid = Grid(size=30, parameters=parameters, costs=costs)

        # Create a Simulation instance
        simulation = Simulation(grid, num_runs=10, num_time_steps=800)

        # Run the simulation and collect results
        infected_percentages, vulnerable_percentages, total_costs = simulation.run_simulation(verbose,
                                                                                              show_plot, save_to_csv,
                                                                                              save_plot)

        # Create a ResultsAnalyzer instance
        analyzer = ResultsAnalyzer(infected_percentages, vulnerable_percentages, total_costs)

        # Calculate average percentages
        avg_infected, avg_vulnerable = analyzer.average_percentages_over_time()
        avg_total_costs = analyzer.average_costs()

        avg_infected_list.append(avg_infected)
        avg_vulnerable_list.append(avg_vulnerable)
        avg_total_costs_list.append(avg_total_costs)

        # Calculate and print peaks of infection and protected from infection
        peak_infected = np.max(avg_infected)
        protected_from_infection = avg_vulnerable[-1]
        peak_infected_list.append(peak_infected)
        protected_from_infection_list.append(protected_from_infection)
        print("Epsilon1 Value: {}. Peak of Infection: {:.1f} - Protected from Infection: {:.1f}".format(epsilon1,
                                                                                                        peak_infected,
                                                                                                        protected_from_infection))

    plot_percentages(avg_infected_list, epsilon1_options, "% of Infected Nodes over Time")
    plot_percentages(avg_vulnerable_list, epsilon1_options, "% of Vulnerable Nodes over Time")
    plot_costs(avg_total_costs_list, epsilon1_options)
    print_values(peak_infected_list, epsilon1_options, "Peaks of infection")
    print_values(protected_from_infection_list, epsilon1_options, "Cells protected")


if __name__ == "__main__":
    main(verbose=True, show_plot=False, save_plot=True)
