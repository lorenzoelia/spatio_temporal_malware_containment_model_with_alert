import numpy as np

# Define constants and parameters
L = 10  # Grid size
N = L * L  # Total number of cells
beta1 = 0.2
beta2 = 0.1
gamma = 0.3
epsilon1 = 0.05
epsilon2 = 0.1
num_time_steps = 100

# Define possible cell states
SUSCEPTIBLE = 0
ALERT_A1 = 1
ALERT_A2 = 2
INFECTED = 3
RECOVERED = 4

# Initialize grid with susceptible cells
grid = np.full((L, L), SUSCEPTIBLE)


# Function to get neighbors of a cell
def get_neighbors(x, y):
    neighbors = []
    for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
            if dx == 0 and dy == 0:
                continue
            new_x = (x + dx) % L
            new_y = (y + dy) % L
            neighbors.append((new_x, new_y))
    return neighbors


# Simulation loop
for _ in range(num_time_steps):
    new_grid = grid.copy()

    for x in range(L):
        for y in range(L):
            cell_state = grid[x, y]

            # Get neighboring cell states
            neighbors = get_neighbors(x, y)
            neighbor_states = [grid[nx, ny] for nx, ny in neighbors]
            neighbors_a1 = neighbor_states.count(ALERT_A1)
            neighbors_i = neighbor_states.count(INFECTED)

            # Transition rules
            if cell_state == ALERT_A1 or cell_state == ALERT_A2:
                r = np.random.rand()
                if r < beta2:
                    new_grid[x, y] = INFECTED
                elif beta2 <= r < beta2 + epsilon2:
                    new_grid[x, y] = ALERT_A1
                elif neighbors_a1 > 0 and beta2 + epsilon2 <= r:
                    new_grid[x, y] = ALERT_A2
                else:
                    new_grid[x, y] = SUSCEPTIBLE

            elif cell_state == SUSCEPTIBLE:
                for _ in range(neighbors_i):
                    r = np.random.rand()
                    if r < beta1:
                        new_grid[x, y] = INFECTED
                    elif beta1 <= r < beta1 + epsilon1:
                        new_grid[x, y] = ALERT_A1
                    elif neighbors_a1 > 0 and beta1 + epsilon1 <= r:
                        new_grid[x, y] = ALERT_A2

            elif cell_state == INFECTED:
                r = np.random.rand()
                if r < gamma:
                    new_grid[x, y] = RECOVERED

    grid = new_grid

# Print the final grid
print(grid)
