import numpy as np

from Cell import Cell
from CellStates import CellStates


class Grid:
    """
    A class representing the grid of cells in the cellular automaton model.
    """

    def __init__(self, size, parameters):
        """
        Initialize a Grid object with the given size and parameters.

        Args:
            size (int): The size of the grid (L).
            parameters (Parameters): An instance of the Parameters class containing model parameters.
        """
        self.size = size
        self.parameters = parameters
        self.grid = np.array([[Cell(CellStates.SUSCEPTIBLE) for _ in range(size)] for _ in range(size)])

    def get_neighbors(self, x, y):
        """
        Get neighboring cells of a given cell.

        Args:
            x (int): X-coordinate of the cell.
            y (int): Y-coordinate of the cell.

        Returns:
            list[Cell]: List of neighboring cells.
        """
        neighbors = []
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                if dx == 0 and dy == 0:
                    continue
                new_x = (x + dx) % self.size
                new_y = (y + dy) % self.size
                neighbors.append(self.grid[new_x, new_y])
        return neighbors

    def simulate(self, num_time_steps):
        """
        Simulate the SASIR model for the specified number of time steps.

        Args:
            num_time_steps (int): Number of time steps to simulate.
        """
        for _ in range(num_time_steps):
            new_grid = self.grid.copy()

            for x in range(self.size):
                for y in range(self.size):
                    cell = self.grid[x, y]
                    cell_state = cell.state

                    # Get neighboring cell states
                    neighbors = self.get_neighbors(x, y)
                    neighbor_states = [neighbor.state for neighbor in neighbors]

                    # Apply transition to the cell
                    cell.transition(neighbor_states, self.parameters)

            self.grid = new_grid

    def __str__(self):
        return "\n".join(" ".join(map(str, row)) for row in self.grid)