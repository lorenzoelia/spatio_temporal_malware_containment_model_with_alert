import datetime
import os

import pandas as pd


class Simulation:
    def __init__(self, grid, num_runs, num_time_steps):
        self.grid = grid
        self.num_runs = num_runs
        self.num_time_steps = num_time_steps

        # Create a Pandas DataFrame to store results
        self.results_df = pd.DataFrame(
            columns=['Run', 'beta1', 'beta2', 'gamma', 'epsilon1', 'epsilon2', 'Infected Percentages',
                     'Vulnerable Percentages', 'Total Costs'])

    def run_simulation(self, verbose=False, show_plot=False, save_to_csv=False, save_plot=False):
        """
        Run the SASIR model simulation for the specified number of runs and time steps.
        """
        all_infected_percentages = []
        all_vulnerable_percentages = []
        all_total_costs = []

        for run in range(self.num_runs):
            print("Simulation Run {} of {}:".format(run + 1, self.num_runs))

            # Reset the grid for each run
            self.grid.initialize_grid()
            if show_plot:
                self.grid.plot()

            # Run the simulation and collect percentages
            infected_percentages, vulnerable_percentages, total_costs = self.grid.simulate(self.num_time_steps,
                                                                                           verbose, show_plot,
                                                                                           save_plot)

            all_infected_percentages.append(infected_percentages)
            all_vulnerable_percentages.append(vulnerable_percentages)
            all_total_costs.append(total_costs)

            # Get Parameters object from the Grid
            parameters_obj = self.grid.parameters

            # Store results in the DataFrame
            self.results_df.loc[run] = [run, parameters_obj.beta1, parameters_obj.beta2,
                                        parameters_obj.gamma, parameters_obj.epsilon1,
                                        parameters_obj.epsilon2, infected_percentages, vulnerable_percentages,
                                        total_costs]

        if save_to_csv:
            # Save the results DataFrame to a CSV file
            timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
            results_folder = "results"
            os.makedirs(results_folder, exist_ok=True)
            csv_filename = os.path.join(results_folder, f"results_{timestamp}.csv")
            self.results_df.to_csv(csv_filename, index=False)
            print("Results saved to:", csv_filename)

        return all_infected_percentages, all_vulnerable_percentages, all_total_costs
